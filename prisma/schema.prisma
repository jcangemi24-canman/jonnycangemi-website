// Prisma schema for NextAuth.js authentication
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  hashedPassword String?  @map("hashed_password")
  role          String    @default("user")
  twoFactorEnabled Boolean @default(false) @map("two_factor_enabled")
  twoFactorSecret String? @map("two_factor_secret")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  accounts      Account[]
  sessions      Session[]
  loginAttempts LoginAttempt[]
  accessCodes   AccessCode[]
  codeUsage     CodeUsage[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model LoginAttempt {
  id        String   @id @default(cuid())
  userId    String?  @map("user_id")
  email     String
  ip        String
  userAgent String   @map("user_agent")
  success   Boolean
  createdAt DateTime @default(now()) @map("created_at")
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("login_attempts")
}

model AccessCode {
  id          String      @id @default(cuid())
  code        String      @unique
  description String?
  isActive    Boolean     @default(true) @map("is_active")
  expiresAt   DateTime?   @map("expires_at")
  maxUses     Int?        @map("max_uses")
  usedCount   Int         @default(0) @map("used_count")
  createdAt   DateTime    @default(now()) @map("created_at")
  createdById String      @map("created_by_id")
  createdBy   User        @relation(fields: [createdById], references: [id], onDelete: Cascade)
  usage       CodeUsage[]

  @@map("access_codes")
}

model CodeUsage {
  id           String     @id @default(cuid())
  accessCodeId String     @map("access_code_id")
  userId       String     @map("user_id")
  usedAt       DateTime   @default(now()) @map("used_at")
  accessCode   AccessCode @relation(fields: [accessCodeId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("code_usage")
}